AoC 2022 - day 23

If there is no Elf in the N, NE, or NW adjacent positions, the Elf proposes
moving northnorth one step.
If there is no Elf in the S, SE, or SW adjacent positions, the Elf proposes
moving southsouth one step.
If there is no Elf in the W, NW, or SW adjacent positions, the Elf proposes
moving westwest one step.
If there is no Elf in the E, NE, or SE adjacent positions, the Elf proposes
moving easteast one step.

Step order
Round 1
1. North if no N, NE or NW
2. South if no S, SE or SW
3. West if no W, NW or SW
4. East is no E, NE or SE

Round 2
1. South if no S, SE or SW
2. West if no W, NW or SW
3. East is no E, NE or SE
4. North if no N, NE or NW

Round 3
1. West if no W, NW or SW
2. East is no E, NE or SE
3. North if no N, NE or NW
4. South if no S, SE or SW

Round 4
1. East is no E, NE or SE
2. North if no N, NE or NW
3. South if no S, SE or SW
4. West if no W, NW or SW

Round 5
1. North if no N, NE or NW
2. South if no S, SE or SW
3. West if no W, NW or SW
4. East is no E, NE or SE

1. Start application
2. Load initial state
    2.1 Read from file
        2.1.1 Read all characters on all lines from "input.txt"
        2.1.2 Store as 2-d char array, "grid". Eg. grid[30][12] = '#'
    2.2 Init 3-d int array, "proposedMove", 2-d array of same size as 2.1.2, where each alement is an array containing 2 elements and will hold the parent objects proposed move. Eg. ary[30][12][0] = 30, ary[30][12][1] = 11 for a move to N
    2.3 Init 2-d int array, "numOfProposedMoves", of same size as 2.1.2, for storing if its ok to move to this position. Eg. ary[30][11] == 1, if its ok to move. More than 1, not ok to move
    2.4 Set inital direction order
        2.4.1 Save in array, "moveOrder" [N,S,W,E]
    2.5 Set search order from current position
        2.5.1 Save as 2-d int array, x and y.
            2.5.1.1 NW:[-1,-1],N:[-1,0],NE:[-1,1],E:[0,1],SE:[1,1],S:[1,0],SW:[1,-1],W:[0,-1]
	2.6 Init int, "numOfRounds"
3. User input number of rounds
    3.1 Ask how many rounds to rounds
        3.1.1 If no input or negative input
            3.1.1.1 Store as -1 in int variable, "numOfRounds"
        3.1.2 If correct positive input
            3.1.2.1 Store in int variable, "numOfRounds"
3.9 Start new round
    3.9.1 Init int, "numOfMoves"
4. Check for neighbours
    4.1 Iterate char array, row-by-row
        4.1.1 Iterate char array, char-by-char
            4.1.1.1 Check for neighbour
                4.1.1.1.1 Use 2-d int array, from 2.5.1
                    4.1.1.1.1.1 If no neighbour
                        4.1.1.1.1.1.1 Go to next char
                    4.1.1.1.1.2 If neighbour
                        4.1.1.1.1.2.1 Propose move
                            4.1.1.1.1.2.1.1 Use step order
                                4.1.1.1.1.2.1.1.2 Save move to array 2.2
                                4.1.1.1.1.2.1.1.3 Add 1 to array 2.3
5. Check proposed moves
    5.1 Iterate array 2.2 row-by-row
		5.1.1 Iterate array 2.2 col-by-col
			5.1.1.1 Iterate array 2.2 coord-by-coord
				5.1.1.1.1 If -1
					5.1.1.1.1.3 continue
				5.1.1.1.2 If >= 0 and if array 2.3 == 1, move position in array 2.1.2 to new position from array 2.2
					5.1.1.1.2.1 Add 1 to "numOfMoves" 3.9.1
	5.2 Reset arrays 2.2 and 2.3
6. Re-order steps
    6.1 Shuffle array 2.4.1
7. Start new round
    7.1 If no moves performed or when number of rounds reached
8. Stop
    8.1 When no moves performed or when number of rounds reached
        8.1.1 Calculate empty ground tiles('.') in smallest rectangle where all # fits
            8.1.1.1 Init ints topRow, rightCol, bottomRow, leftCol
                8.1.1.1.1 Start from [0][0] in a spiral pattern
                    8.1.1.1.1.1 Go through top row
                        8.1.1.1.1.1.1 If char is #, save row to topRow
                    8.1.1.1.1.2 Go through right edge column
                        8.1.1.1.1.2.1 If char is #, save col to rightCol
                    8.1.1.1.1.3 Go through bottom row in reverse
                        8.1.1.1.1.3.1 If char is #, save row to bottomRow
                    8.1.1.1.1.4 Go through left edge column in reverse until x=x+1
                        8.1.1.1.1.4.1 If char is #, save col to leftCol
					8.1.1.1.1.4 If all four sides of recatngle has been found, move on.
                8.1.1.1.2 Print result
					8.1.1.1.2.1 Init int dotCount
					8.1.1.1.2.2 Iterate grid row-by-row, from topRow to bottomRow
						8.1.1.1.2.2.1 Iterate grid char-by-char, from leftCol to rightCol
							8.1.1.1.2.2.1.1 If char is .
								8.1.1.1.2.2.1.1.1 Add 1 to dotCount
					8.1.1.1.2.3 Print dotCount to screen
				8.1.1.1.3 Exit application or go to 2
				
				
Suggested functions
loadInitialState - ok
readFromFile - ok
userInput - ok
startRound - ok
checkForNeighbours - ok
saveProposedMove - ok
performProposedMoves - ok
resetArrays - ok
shuffleOrder - 
calculateEmptyTiles - ok
printGrid - ok